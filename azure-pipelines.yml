# https://aka.ms/yaml
# Azure DevOps Pipeline with Synopsys IO

trigger:
  branches:
    include:
      - main
      - devsecops

pool:
  name: Custom

variables:
  # IO
  IO_PERSONA: devsecops
  IO_PROJECT_NAME: WebGoat
  IO_WORKFLOW_VERSION: 2022.7.0

  # JIRA
  JIRA_ASSIGNEE: 'admin'
  JIRA_ISSUE_TYPE: Bug
  JIRA_ISSUE_QUERY: "resolution=Unresolved"
  JIRA_PROJECT_KEY: 'WEBGOAT'
  JIRA_PROJECT_NAME: 'WEBGOAT'
  
  # AST - SCA - Black Duck
  BLACK_DUCK_PROJECT_NAME: 'WebGoat'
  BLACK_DUCK_PROJECT_VERSION: '8.2.1-SNAPSHOT'

stages:
- stage: IntelligentOrchestration
  jobs:
  - job: IntelligentOrchestration
    displayName: IntelligentOrchestration
    timeoutInMinutes: 0
    steps:
    - checkout: self
    - script: |
        # Get SCM details
        SCM_TYPE=$(echo "$(Build.Repository.Provider)" | awk '{print tolower($0)}')
        SCM_OWNER="$(cut -d'/' -f1 <<<"$(Build.Repository.Name)")"
        SCM_REPO_NAME="$(cut -d'/' -f2 <<<"$(Build.Repository.Name)")"
        SCM_BRANCH_NAME=$(Build.SourceBranchName)

        # Stage IO (Prescription)
        ../../../io --stage io \
          io.server.url=$(IO_SERVER_URL) io.server.token=$(IO_TOKEN) workflow.engine.version=$(IO_WORKFLOW_VERSION) project.name=$(IO_PROJECT_NAME) persona.type=$(IO_PERSONA) \
          scm.type="$SCM_TYPE" scm.owner="$SCM_OWNER" scm.repository.name="$SCM_REPO_NAME" scm.repository.branch.name="$SCM_BRANCH_NAME" \
          github.apiurl="https://api.github.com/repos" github.username=$(GITHUB_USERNAME) github.token=$(GITHUB_TOKEN) \
          jira.assignee="$(JIRA_ASSIGNEE)" jira.authtoken="$(JIRA_TOKEN)" jira.enable=true jira.hosturl="$(JIRA_SERVER_URL)" jira.issuesquery="$(JIRA_ISSUE_QUERY)" jira.issuetype="$(JIRA_ISSUE_TYPE)" jira.project.key="$(JIRA_PROJECT_KEY)" jira.project.name="$(JIRA_PROJECT_NAME)" jira.username="$(JIRA_ASSIGNEE)"

        export IO_IQ_RUN_ID=$(jq -r '.data.io.run.id' io_state.json)
        apiURL="${IO_SERVER_URL}"
        apiURL+="${IO_IQ_RUN_API}"
        apiURL+="${IO_IQ_RUN_ID}"
        apiHeader="Authorization: Bearer "
        apiHeader+="$(IO_TOKEN)"
        echo "API call to get IO IQ run details: ${apiURL}"
        iq=$(curl --location --request GET "${apiURL}" --header "${apiHeader}")
        echo "================================ IO Risk Explanation ====================================="
        echo "${iq}" | jq
        echo "=========================================================================================="
        echo
      displayName: 'Prescription'

    - script: |
        # Conditionally run SAST
        DO_SAST=$(jq -r '.data.prescription.security.activities.sast.enabled' io_state.json)
        if [[ "$DO_SAST" == "true" ]];
        then
          echo "Run SAST..."
        else
          echo "SAST skipped due to prescription"
        fi
      displayName: 'SAST'

    - script: |
        # Conditionally run SCA
        DO_SCA=$(jq -r '.data.prescription.security.activities.sca.enabled' io_state.json)
        if [[ "$DO_SCA" == "true" ]];
        then
          chmod a+x executeBlackDuck.sh
          ../../../io --state io_state.json --stage execution --adapters io-adapter-blackduck.json \
            blackduck.instanceurl=$(BLACK_DUCK_SERVER_URL) \
            blackduck.authtoken=$(BLACK_DUCK_TOKEN) \
            blackduck.projectname=$(BLACK_DUCK_PROJECT_NAME) \
            blackduck.projectversion=$(BLACK_DUCK_PROJECT_VERSION)
        else
          echo "SCA skipped due to prescription"
        fi
      displayName: 'SCA - Black Duck'

    - script: |
        # Conditionally run Image Scan
        DO_IMAGE_SCAN=$(jq -r '.data.prescription.security.activities.imageScan.enabled' io_state.json)
        if [[ "$DO_IMAGE_SCAN" == "true" ]];
        then
          echo "Run Image Scan..."
        else
          echo "Image Scan skipped due to prescription"
        fi
      displayName: 'Image Scan'

    - script: |
        # Conditionally run DAST
        DO_DAST=$(jq -r '.data.prescription.security.activities.dast.enabled' io_state.json)
        if [[ "$DO_DAST" == "true" ]];
        then
          echo "Run DAST..."
        else
          echo "DAST skipped due to prescription"
        fi
      displayName: 'DAST'

    - script: |
        # Conditionally run Penetration Test
        DO_PEN_TEST=$(jq -r '.data.prescription.security.activities.dastPlusM.enabled' io_state.json)
        if [[ "$DO_PEN_TEST" == "true" ]];
        then
          echo "Run Penetration Test..."
        else
          echo "Penetration Test skipped due to prescription"
        fi
      displayName: 'Penetration Test'

    - script: |
        # Conditionally run Secure Code Review
        DO_CODE_REVIEW=$(jq -r '.data.prescription.security.activities.sastPlusM.enabled' io_state.json)
        if [[ "$DO_CODE_REVIEW" == "true" ]];
        then
          echo "Run Secure Code Review..."
        else
          echo "Secure Code Review skipped due to prescription"
        fi
      displayName: 'Secure Code Review'

    - script: |
        # Conditionally run Threat Model
        DO_THREAT_MODEL=$(jq -r '.data.prescription.security.activities.THREATMODEL.enabled' io_state.json)
        if [[ "$DO_THREAT_MODEL" == "true" ]];
        then
          echo "Run Threat Model..."
        else
          echo "Threat Model skipped due to prescription"
        fi
      displayName: 'Threat Model'

    - script: |
        # Conditionally run Network Scan
        DO_NETWORK_SCAN=$(jq -r '.data.prescription.security.activities.NETWORK.enabled' io_state.json)
        if [[ "$DO_NETWORK_SCAN" == "true" ]];
        then
          echo "Run Network Scan..."
        else
          echo "Network Scan skipped due to prescription"
        fi
      displayName: 'Network Scan'

    - script: |
        # Conditionally run Infrastructure Review
        DO_INFRA_REVIEW=$(jq -r '.data.prescription.security.activities.INFRA.enabled' io_state.json)
        if [[ "$DO_INFRA_REVIEW" == "true" ]];
        then
          echo "Run Infrastructure Review..."
        else
          echo "Infrastructure Review skipped due to prescription"
        fi
      displayName: 'Infrastructure Review'

    - script: |
        # Conditionally run Cloud Configuration Review
        DO_CLOUD_CONFIG_REVIEW=$(jq -r '.data.prescription.security.activities.CLOUD.enabled' io_state.json)
        if [[ "$DO_CLOUD_CONFIG_REVIEW" == "true" ]];
        then
          echo "Run Cloud Configuration Review..."
        else
          echo "Cloud Configuration Review skipped due to prescription"
        fi
      displayName: 'Cloud Configuration Review'

    - script: |
        # Conditionally run BSIMM - Code Review 3.4 - Malicious Code Detection
        DO_MCD=$(jq -r '.data.prescription.security.activities.BSIMMCRThreePointFour.enabled' io_state.json)
        if [[ "$DO_MCD" == "true" ]];
        then
          echo "Run BSIMM activity - Code Review 3.4 - Malicious Code Detection..."
        else
          echo "Malicious Code Detection skipped due to prescription"
        fi
      displayName: 'Malicious Code Detection'

    - script: |
        ../../../io --state io_state.json --stage workflow
        echo "========================== IO WorkflowEngine Summary ============================"
        WFOUTPUT=wf-output.json
        if [[ -f "$WFOUTPUT" ]]; then
          echo "Breaker Status - $(jq -r '.breaker.status' wf-output.json)"
        else
          echo "No Workflow Output JSON - Were any scans run?"
        fi
        echo "========================== IO WorkflowEngine Summary ============================"
      name: 'Workflow'
